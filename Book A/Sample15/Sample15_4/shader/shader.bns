		uniform mat4 uMVPMatrix; //总变换矩阵
		uniform mat4 uMMatrix; //变换矩阵
		uniform vec3 uLightLocation;	//光源位置
		uniform vec3 uCamera;	//摄像机位置
		attribute vec3 aPosition;  //接收从渲染管线传过来的顶点位置
		attribute vec3 aNormal;    //接收从渲染管线传过来的顶点法向量
		attribute vec2 aTexCoor;    //接收从渲染管线传过来的顶点纹理坐标
		
		//用于传递给片元着色器程序的变量
		varying vec4 ambient;
		varying vec4 diffuse;
		varying vec4 specular;
		varying vec2 vTextureCoord;  //用于传递给片元着色器程序的纹理坐标
		//定位光光照计算的方法
		void pointLight(					//定位光光照计算的方法
		  in vec3 normal,				//法向量
		  inout vec4 ambient,			//环境光最终强度
		  inout vec4 diffuse,				//散射光最终强度
		  inout vec4 specular,			//镜面光最终强度
		  in vec3 lightLocation,			//光源位置
		  in vec4 lightAmbient,			//环境光强度
		  in vec4 lightDiffuse,			//散射光强度
		  in vec4 lightSpecular			//镜面光强度
		){
		  ambient=lightAmbient;			//直接得出环境光的最终强度  
		  vec3 normalTarget=aPosition+normal;	//计算变换后的法向量
		  vec3 newNormal=(uMMatrix*vec4(normalTarget,1)).xyz-(uMMatrix*vec4(aPosition,1)).xyz;
		  newNormal=normalize(newNormal); 	//对法向量规格化
		  //计算从表面点到摄像机的向量
		  vec3 eye= normalize(uCamera-(uMMatrix*vec4(aPosition,1)).xyz);  
		  //计算从表面点到光源位置的向量vp
		  vec3 vp= normalize(lightLocation-(uMMatrix*vec4(aPosition,1)).xyz);  
		  vp=normalize(vp);//格式化vp
		  vec3 halfVector=normalize(vp+eye);	//求视线与光线的半向量    
		  float shininess=50.0;				//粗糙度，越小越光滑
		  float nDotViewPosition=max(0.0,dot(newNormal,vp)); 	//求法向量与vp的点积与0的最大值
		  diffuse=lightDiffuse*nDotViewPosition;				//计算散射光的最终强度
		  float nDotViewHalfVector=dot(newNormal,halfVector);	//法线与半向量的点积 
		  float powerFactor=max(0.0,pow(nDotViewHalfVector,shininess)); 	//镜面反射光强度因子
		  specular=lightSpecular*powerFactor;    			//计算镜面光的最终强度
		}
		
		void main()     
		{ 
		   gl_Position = uMVPMatrix * vec4(aPosition,1); //根据总变换矩阵计算此次绘制此顶点位置  
		   
		   vec4 ambientTemp, diffuseTemp, specularTemp;   //存放环境光、散射光、镜面反射光的临时变量      
		   pointLight(normalize(aNormal),ambientTemp,diffuseTemp,specularTemp,uLightLocation,vec4(0.05,0.05,0.05,1.0),vec4(1.0,1.0,1.0,1.0),vec4(0.3,0.3,0.3,1.0));
		   
		   ambient=ambientTemp;
		   diffuse=diffuseTemp;
		   specular=specularTemp;
		   vTextureCoord = aTexCoor;//将接收的纹理坐标传递给片元着色器程序
		}                      

		<#BREAK_BN#>	

		precision mediump float;//设置默认浮点精度
		uniform sampler2D sTexture;//白天纹理的内容数据
		uniform sampler2D sTextureNight;//夜晚纹理的内容数据
		//接收从顶点着色器程序传过来的参数
		varying vec4 ambient;//从顶点着色器程序传递过来的环境光最终强度
		varying vec4 diffuse;//从顶点着色器程序传递过来的散射光最终强度
		varying vec4 specular;//从顶点着色器程序传递过来的镜面光最终强度
		varying vec2 vTextureCoord;//接收从顶点着色器程序传过来的纹理坐标
		void main()                         
		{    
			//将计算出的颜色给此片元
			vec4 finalColor=texture2D(sTexture, vTextureCoord); //从白天纹理图中采样  
			//给此片元颜色值
			finalColor = finalColor*ambient+finalColor*specular+finalColor*diffuse;//给此片元颜色值
			vec4 finalColorNight = texture2D(sTextureNight, vTextureCoord); //从夜晚纹理图中采样
			finalColorNight = finalColorNight*vec4(0.5,0.5,0.5,1.0);//计算出的该片元夜晚颜色值
			
			if(diffuse.x>0.21)//当散射光分量大于0.21时
			{
				gl_FragColor=finalColor;  //采用白天纹理采样出的颜色值 
			} 
			else if(diffuse.x<0.05)	//当散射光分量小于0.05时
			{     
				 gl_FragColor=finalColorNight;//采用夜间纹理采样出的颜色值
			}
			else//当散射光分量大于0.05小于0.21时，为白天夜间纹理的过渡阶段
			{
				 float t=(diffuse.x-0.05)/0.16;//计算白天纹理应占纹理过渡阶段的百分比
				 gl_FragColor=t*finalColor+(1.0-t)*finalColorNight;//计算白天黑夜过渡阶段的颜色值
			}  

		}     
		